syntax = "proto3";

package baidubce.ai_custom.v1;

option go_package = "github.com/ConnectAI-E/go-wenxin/gen/go/baidubce/ai_custom/v1;ai_customv1";
option java_multiple_files = true;
option java_outer_classname = "WenxinworkshopProto";
option java_package = "com.qiniai.wenxin.baidubce.ai_custom.v1";

message Message {
  // 当前支持以下：
  // user: 表示用户
  // assistant: 表示对话助手
  string role = 1;
  // 对话内容，不能为空。
  string content = 2;
}

message Usage {
  // 问题tokens数。
  int32 prompt_tokens = 1;
  // 回答tokens数。
  int32 completion_tokens = 2;
  // tokens总数。
  int32 total_tokens = 3;
}

// 文心一言云服务
message ChatCompletionsRequest {
  // 是 	聊天上下文信息。说明：
  // （1）messages成员不能为空，1个成员表示单轮对话，多个成员表示多轮对话。
  // （2）最后一个message为当前请求的信息，前面的message为历史对话信息。
  // （3）必须为奇数个成员，成员中message的role必须依次为user、assistant。
  // （4）最后一个message的content长度（即此轮对话的问题）不能超过2000个字符；如果messages中content总长度大于2000字符，系统会依次遗忘最早的历史会话，直到content的总长度不超过2000个字符。
  repeated Message messages = 1;
  // 否 	是否以流式接口的形式返回数据，默认false。
  bool stream = 2;
  // 否 	表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用。
  string user = 3;
}

// ErnieBot-Lite
message ChatEbInstantRequest {
  //   是 	聊天上下文信息。说明：
  // （1）messages成员不能为空，1个成员表示单轮对话，多个成员表示多轮对话。
  // （2）最后一个message为当前请求的信息，前面的message为历史对话信息。
  // （3）必须为奇数个成员，成员中message的role必须依次为user、assistant。
  // （4）最后一个message的content长度（即此轮对话的问题）不能超过2000个字符；如果messages中content总长度大于2000字符，系统会依次遗忘最早的历史会话，直到content的总长度不超过2000个字符。
  repeated Message messages = 1;
  // 否 	是否以流式接口的形式返回数据，默认false。
  bool stream = 2;
  // 否 	表示最终用户的唯一标识符，可以监视和检测滥用行为，防止接口恶意调用。
  string user = 3;
}

// 文心一言云服务
// ErnieBot-Lite
message ChatResponse {
  // 本轮对话的id。
  string id = 1;
  // 回包类型。
  // chat.completion：多轮对话返回
  string object = 2;
  // 时间戳。
  int32 created = 3;
  // 表示当前子句的序号。只有在流式接口模式下会返回该字段。
  int32 sentence_id = 4;
  // 表示当前子句是否是最后一句。只有在流式接口模式下会返回该字段。
  bool is_end = 5;
  // 对话返回结果。
  string result = 6;
  // 表示用户输入是否存在安全，是否关闭当前会话，清理历史回话信息。
  // true：是，表示用户输入存在安全风险，建议关闭当前会话，清理历史会话信息。
  // false：否，表示用户输入无安全风险。
  bool need_clear_history = 7;
  // token统计信息，token数 = 汉字数+单词数*1.3 （仅为估算逻辑）。
  Usage usage = 8;
}
