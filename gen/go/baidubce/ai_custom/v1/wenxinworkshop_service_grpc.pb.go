// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: baidubce/ai_custom/v1/wenxinworkshop_service.proto

package ai_customv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WenxinworkshopService_ChatCompletions_FullMethodName       = "/baidubce.ai_custom.v1.WenxinworkshopService/ChatCompletions"
	WenxinworkshopService_ChatCompletionsStream_FullMethodName = "/baidubce.ai_custom.v1.WenxinworkshopService/ChatCompletionsStream"
	WenxinworkshopService_ChatEbInstant_FullMethodName         = "/baidubce.ai_custom.v1.WenxinworkshopService/ChatEbInstant"
)

// WenxinworkshopServiceClient is the client API for WenxinworkshopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WenxinworkshopServiceClient interface {
	// 文心一言云服务
	ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	ChatCompletionsStream(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (WenxinworkshopService_ChatCompletionsStreamClient, error)
	ChatEbInstant(ctx context.Context, in *ChatEbInstantRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type wenxinworkshopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWenxinworkshopServiceClient(cc grpc.ClientConnInterface) WenxinworkshopServiceClient {
	return &wenxinworkshopServiceClient{cc}
}

func (c *wenxinworkshopServiceClient) ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, WenxinworkshopService_ChatCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wenxinworkshopServiceClient) ChatCompletionsStream(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (WenxinworkshopService_ChatCompletionsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &WenxinworkshopService_ServiceDesc.Streams[0], WenxinworkshopService_ChatCompletionsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &wenxinworkshopServiceChatCompletionsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WenxinworkshopService_ChatCompletionsStreamClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type wenxinworkshopServiceChatCompletionsStreamClient struct {
	grpc.ClientStream
}

func (x *wenxinworkshopServiceChatCompletionsStreamClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wenxinworkshopServiceClient) ChatEbInstant(ctx context.Context, in *ChatEbInstantRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, WenxinworkshopService_ChatEbInstant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WenxinworkshopServiceServer is the server API for WenxinworkshopService service.
// All implementations should embed UnimplementedWenxinworkshopServiceServer
// for forward compatibility
type WenxinworkshopServiceServer interface {
	// 文心一言云服务
	ChatCompletions(context.Context, *ChatCompletionsRequest) (*ChatResponse, error)
	ChatCompletionsStream(*ChatCompletionsRequest, WenxinworkshopService_ChatCompletionsStreamServer) error
	ChatEbInstant(context.Context, *ChatEbInstantRequest) (*ChatResponse, error)
}

// UnimplementedWenxinworkshopServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWenxinworkshopServiceServer struct {
}

func (UnimplementedWenxinworkshopServiceServer) ChatCompletions(context.Context, *ChatCompletionsRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletions not implemented")
}
func (UnimplementedWenxinworkshopServiceServer) ChatCompletionsStream(*ChatCompletionsRequest, WenxinworkshopService_ChatCompletionsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionsStream not implemented")
}
func (UnimplementedWenxinworkshopServiceServer) ChatEbInstant(context.Context, *ChatEbInstantRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEbInstant not implemented")
}

// UnsafeWenxinworkshopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WenxinworkshopServiceServer will
// result in compilation errors.
type UnsafeWenxinworkshopServiceServer interface {
	mustEmbedUnimplementedWenxinworkshopServiceServer()
}

func RegisterWenxinworkshopServiceServer(s grpc.ServiceRegistrar, srv WenxinworkshopServiceServer) {
	s.RegisterService(&WenxinworkshopService_ServiceDesc, srv)
}

func _WenxinworkshopService_ChatCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WenxinworkshopServiceServer).ChatCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WenxinworkshopService_ChatCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WenxinworkshopServiceServer).ChatCompletions(ctx, req.(*ChatCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WenxinworkshopService_ChatCompletionsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WenxinworkshopServiceServer).ChatCompletionsStream(m, &wenxinworkshopServiceChatCompletionsStreamServer{stream})
}

type WenxinworkshopService_ChatCompletionsStreamServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type wenxinworkshopServiceChatCompletionsStreamServer struct {
	grpc.ServerStream
}

func (x *wenxinworkshopServiceChatCompletionsStreamServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WenxinworkshopService_ChatEbInstant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatEbInstantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WenxinworkshopServiceServer).ChatEbInstant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WenxinworkshopService_ChatEbInstant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WenxinworkshopServiceServer).ChatEbInstant(ctx, req.(*ChatEbInstantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WenxinworkshopService_ServiceDesc is the grpc.ServiceDesc for WenxinworkshopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WenxinworkshopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baidubce.ai_custom.v1.WenxinworkshopService",
	HandlerType: (*WenxinworkshopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletions",
			Handler:    _WenxinworkshopService_ChatCompletions_Handler,
		},
		{
			MethodName: "ChatEbInstant",
			Handler:    _WenxinworkshopService_ChatEbInstant_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletionsStream",
			Handler:       _WenxinworkshopService_ChatCompletionsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "baidubce/ai_custom/v1/wenxinworkshop_service.proto",
}
