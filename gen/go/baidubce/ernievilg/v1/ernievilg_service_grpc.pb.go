// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: baidubce/ernievilg/v1/ernievilg_service.proto

package ernievilgv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ErnievilgService_Txt2ImgV2_FullMethodName = "/baidubce.ernievilg.v1.ErnievilgService/Txt2ImgV2"
	ErnievilgService_GetImgV2_FullMethodName  = "/baidubce.ernievilg.v1.ErnievilgService/GetImgV2"
)

// ErnievilgServiceClient is the client API for ErnievilgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErnievilgServiceClient interface {
	Txt2ImgV2(ctx context.Context, in *Txt2ImgV2Request, opts ...grpc.CallOption) (*Txt2ImgV2Response, error)
	GetImgV2(ctx context.Context, in *GetImgV2Request, opts ...grpc.CallOption) (*GetImgV2Response, error)
}

type ernievilgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErnievilgServiceClient(cc grpc.ClientConnInterface) ErnievilgServiceClient {
	return &ernievilgServiceClient{cc}
}

func (c *ernievilgServiceClient) Txt2ImgV2(ctx context.Context, in *Txt2ImgV2Request, opts ...grpc.CallOption) (*Txt2ImgV2Response, error) {
	out := new(Txt2ImgV2Response)
	err := c.cc.Invoke(ctx, ErnievilgService_Txt2ImgV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ernievilgServiceClient) GetImgV2(ctx context.Context, in *GetImgV2Request, opts ...grpc.CallOption) (*GetImgV2Response, error) {
	out := new(GetImgV2Response)
	err := c.cc.Invoke(ctx, ErnievilgService_GetImgV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErnievilgServiceServer is the server API for ErnievilgService service.
// All implementations should embed UnimplementedErnievilgServiceServer
// for forward compatibility
type ErnievilgServiceServer interface {
	Txt2ImgV2(context.Context, *Txt2ImgV2Request) (*Txt2ImgV2Response, error)
	GetImgV2(context.Context, *GetImgV2Request) (*GetImgV2Response, error)
}

// UnimplementedErnievilgServiceServer should be embedded to have forward compatible implementations.
type UnimplementedErnievilgServiceServer struct {
}

func (UnimplementedErnievilgServiceServer) Txt2ImgV2(context.Context, *Txt2ImgV2Request) (*Txt2ImgV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txt2ImgV2 not implemented")
}
func (UnimplementedErnievilgServiceServer) GetImgV2(context.Context, *GetImgV2Request) (*GetImgV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImgV2 not implemented")
}

// UnsafeErnievilgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErnievilgServiceServer will
// result in compilation errors.
type UnsafeErnievilgServiceServer interface {
	mustEmbedUnimplementedErnievilgServiceServer()
}

func RegisterErnievilgServiceServer(s grpc.ServiceRegistrar, srv ErnievilgServiceServer) {
	s.RegisterService(&ErnievilgService_ServiceDesc, srv)
}

func _ErnievilgService_Txt2ImgV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Txt2ImgV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErnievilgServiceServer).Txt2ImgV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErnievilgService_Txt2ImgV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErnievilgServiceServer).Txt2ImgV2(ctx, req.(*Txt2ImgV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErnievilgService_GetImgV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImgV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErnievilgServiceServer).GetImgV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ErnievilgService_GetImgV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErnievilgServiceServer).GetImgV2(ctx, req.(*GetImgV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ErnievilgService_ServiceDesc is the grpc.ServiceDesc for ErnievilgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErnievilgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baidubce.ernievilg.v1.ErnievilgService",
	HandlerType: (*ErnievilgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Txt2ImgV2",
			Handler:    _ErnievilgService_Txt2ImgV2_Handler,
		},
		{
			MethodName: "GetImgV2",
			Handler:    _ErnievilgService_GetImgV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "baidubce/ernievilg/v1/ernievilg_service.proto",
}
